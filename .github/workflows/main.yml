name: CI/CD Pipeline
on:
  push:
    branches:
      - main  # Trigger the pipeline when code is pushed to the `main` branch
  pull_request:
    branches:
      - main  # Trigger the pipeline on pull requests to the `main` branch

jobs:
  build:
    runs-on: ubuntu-latest  # The environment to run the workflow on

    steps:
      - name: Check out code
        uses: actions/checkout@v2  # Check out the code from the GitHub repository

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1  # Set up Docker Buildx for advanced features

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Your DockerHub username stored in GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Your DockerHub password stored in GitHub Secrets

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:$GITHUB_SHA .  # Build the Docker image with the commit hash
          docker tag ${{ secrets.DOCKER_USERNAME }}/myapp:$GITHUB_SHA ${{ secrets.DOCKER_USERNAME }}/myapp:latest  # Tag the image as `latest`

      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:$GITHUB_SHA  # Push the image to DockerHub with commit hash
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest  # Push the `latest` tag

    deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          script: |
            script: |
               echo "Pulling latest Docker image..."
               docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:latest
  
              echo "Stopping and removing existing container..."
              docker stop myapp || true
              docker rm myapp || true
            
              echo "Force stopping any process using port 80..."
              sudo lsof -t -i:80 | xargs sudo kill -9 || true
            
              echo "Removing any old Docker network conflicts..."
              docker network prune -f
            
              echo "Running new container..."
              docker run -d --name myapp -p 80:80 ${{ secrets.DOCKER_USERNAME }}/myapp:latest
